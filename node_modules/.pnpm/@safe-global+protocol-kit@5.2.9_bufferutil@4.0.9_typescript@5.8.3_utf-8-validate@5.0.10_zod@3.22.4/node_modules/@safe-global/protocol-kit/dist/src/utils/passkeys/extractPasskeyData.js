"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getDefaultFCLP256VerifierAddress = exports.extractPasskeyData = exports.decodePublicKey = exports.decodePublicKeyForWeb = exports.decodePublicKeyForReactNative = void 0;
const buffer_1 = require("buffer");
const safe_modules_deployments_1 = require("@safe-global/safe-modules-deployments");
/**
 * Converts a Base64 URL-encoded string to a Uint8Array.
 *
 * This function handles Base64 URL variants by replacing URL-safe characters
 * with standard Base64 characters, decodes the Base64 string into a binary string,
 * and then converts it into a Uint8Array.
 *
 * @param {string} base64 - The Base64 URL-encoded string to convert.
 * @returns {Uint8Array} The resulting Uint8Array from the decoded Base64 string.
 */
function base64ToUint8Array(base64) {
    const base64Fixed = base64.replace(/-/g, '+').replace(/_/g, '/');
    const binaryBuffer = buffer_1.Buffer.from(base64Fixed, 'base64');
    return new Uint8Array(binaryBuffer);
}
/**
 * Dynamic import libraries required for decoding public keys.
 */
async function importLibs() {
    const { p256 } = await Promise.resolve().then(() => __importStar(require('@noble/curves/p256')));
    const { AsnParser, AsnProp, AsnPropTypes, AsnType, AsnTypeTypes } = await Promise.resolve().then(() => __importStar(require('@peculiar/asn1-schema')));
    let AlgorithmIdentifier = class AlgorithmIdentifier {
        constructor() {
            this.id = '';
            this.curve = '';
        }
    };
    __decorate([
        AsnProp({ type: AsnPropTypes.ObjectIdentifier })
    ], AlgorithmIdentifier.prototype, "id", void 0);
    __decorate([
        AsnProp({ type: AsnPropTypes.ObjectIdentifier, optional: true })
    ], AlgorithmIdentifier.prototype, "curve", void 0);
    AlgorithmIdentifier = __decorate([
        AsnType({ type: AsnTypeTypes.Sequence })
    ], AlgorithmIdentifier);
    let ECPublicKey = class ECPublicKey {
        constructor() {
            this.algorithm = new AlgorithmIdentifier();
            this.publicKey = new ArrayBuffer(0);
        }
    };
    __decorate([
        AsnProp({ type: AlgorithmIdentifier })
    ], ECPublicKey.prototype, "algorithm", void 0);
    __decorate([
        AsnProp({ type: AsnPropTypes.BitString })
    ], ECPublicKey.prototype, "publicKey", void 0);
    ECPublicKey = __decorate([
        AsnType({ type: AsnTypeTypes.Sequence })
    ], ECPublicKey);
    return {
        p256,
        AsnParser,
        ECPublicKey
    };
}
/**
 * Decodes a Base64-encoded ECDSA public key for React Native and extracts the x and y coordinates.
 *
 * This function handles both ASN.1 DER-encoded keys and uncompressed keys. It decodes a Base64-encoded
 * public key, checks its format, and extracts the x and y coordinates using the `@noble/curves` library.
 * The coordinates are returned as hexadecimal strings prefixed with '0x'.
 *
 * @param {string} publicKey - The Base64-encoded public key to decode.
 * @returns {PasskeyCoordinates} An object containing the x and y coordinates of the public key.
 * @throws {Error} Throws an error if the key is empty or if the coordinates cannot be extracted.
 */
async function decodePublicKeyForReactNative(publicKey) {
    const { p256, AsnParser, ECPublicKey } = await importLibs();
    let publicKeyBytes = base64ToUint8Array(publicKey);
    if (publicKeyBytes.length === 0) {
        throw new Error('Decoded public key is empty.');
    }
    const isAsn1Encoded = publicKeyBytes[0] === 0x30;
    const isUncompressedKey = publicKeyBytes.length === 64;
    if (isAsn1Encoded) {
        const asn1ParsedKey = AsnParser.parse(publicKeyBytes.buffer, ECPublicKey);
        publicKeyBytes = new Uint8Array(asn1ParsedKey.publicKey);
    }
    else if (isUncompressedKey) {
        const uncompressedKey = new Uint8Array(65);
        uncompressedKey[0] = 0x04;
        uncompressedKey.set(publicKeyBytes, 1);
        publicKeyBytes = uncompressedKey;
    }
    const point = p256.ProjectivePoint.fromHex(publicKeyBytes);
    const x = point.x.toString(16).padStart(64, '0');
    const y = point.y.toString(16).padStart(64, '0');
    return {
        x: '0x' + x,
        y: '0x' + y
    };
}
exports.decodePublicKeyForReactNative = decodePublicKeyForReactNative;
/**
 * Decodes an ECDSA public key for the web platform and extracts the x and y coordinates.
 *
 * This function uses the Web Crypto API to import a public key in SPKI format and then
 * exports it to a JWK format to retrieve the x and y coordinates. The coordinates are
 * returned as hexadecimal strings prefixed with '0x'.
 *
 * @param {ArrayBuffer} publicKey - The public key in SPKI format to decode.
 * @returns {Promise<PasskeyCoordinates>} A promise that resolves to an object containing
 * the x and y coordinates of the public key.
 * @throws {Error} Throws an error if the key coordinates cannot be extracted.
 */
async function decodePublicKeyForWeb(publicKey) {
    const algorithm = {
        name: 'ECDSA',
        namedCurve: 'P-256',
        hash: { name: 'SHA-256' }
    };
    const key = await crypto.subtle.importKey('spki', publicKey, algorithm, true, ['verify']);
    const { x, y } = await crypto.subtle.exportKey('jwk', key);
    const isValidCoordinates = !!x && !!y;
    if (!isValidCoordinates) {
        throw new Error('Failed to generate passkey Coordinates. crypto.subtle.exportKey() failed');
    }
    return {
        x: '0x' + buffer_1.Buffer.from(x, 'base64').toString('hex'),
        y: '0x' + buffer_1.Buffer.from(y, 'base64').toString('hex')
    };
}
exports.decodePublicKeyForWeb = decodePublicKeyForWeb;
/**
 * Decodes the x and y coordinates of the public key from a created public key credential response.
 *
 * @param {AuthenticatorResponse} response
 * @returns {PasskeyCoordinates} Object containing the coordinates derived from the public key of the passkey.
 * @throws {Error} Throws an error if the coordinates could not be extracted via `p256.ProjectivePoint.fromHex`
 */
async function decodePublicKey(response) {
    const publicKeyAuthenticatorResponse = response;
    const publicKey = publicKeyAuthenticatorResponse.getPublicKey();
    if (!publicKey) {
        throw new Error('Failed to generate passkey coordinates. getPublicKey() failed');
    }
    if (typeof publicKey === 'string') {
        // Public key is base64 encoded
        // - React Native platform uses base64 encoded strings
        return decodePublicKeyForReactNative(publicKey);
    }
    if (publicKey instanceof ArrayBuffer) {
        // Public key is an ArrayBuffer
        // - Web platform uses ArrayBuffer
        return await decodePublicKeyForWeb(publicKey);
    }
    throw new Error('Unsupported public key format.');
}
exports.decodePublicKey = decodePublicKey;
/**
 * Extracts and returns the passkey data (coordinates and rawId) from a given passkey Credential.
 *
 * @param {Credential} passkeyCredential - The passkey credential generated via `navigator.credentials.create()` or other method in another platforms.
 * @returns {Promise<PasskeyArgType>} A promise that resolves to an object containing the coordinates and the rawId derived from the passkey.
 * This is the important information in the Safe account context and should be stored securely as it is used to verify the passkey and to instantiate the SDK
 * as a signer (`Safe.init())
 * @throws {Error} Throws an error if the coordinates could not be extracted
 */
async function extractPasskeyData(passkeyCredential) {
    const passkeyPublicKeyCredential = passkeyCredential;
    const rawId = buffer_1.Buffer.from(passkeyPublicKeyCredential.rawId).toString('hex');
    const coordinates = await decodePublicKey(passkeyPublicKeyCredential.response);
    return {
        rawId,
        coordinates
    };
}
exports.extractPasskeyData = extractPasskeyData;
/**
 * Retrieves the default FCLP256 Verifier address for a given blockchain network.
 *
 * This function fetches the deployment information for the FCLP256 Verifier and
 * returns the verifier address associated with the specified chain ID. It ensures
 * that the correct version and release status are used.
 *
 * @param {string} chainId - The ID of the blockchain network to retrieve the verifier address for.
 * @returns {string} The FCLP256 Verifier address for the specified chain ID.
 * @throws {Error} Throws an error if the deployment information or address cannot be found.
 */
function getDefaultFCLP256VerifierAddress(chainId) {
    const FCLP256VerifierDeployment = (0, safe_modules_deployments_1.getFCLP256VerifierDeployment)({
        version: '0.2.1',
        released: true,
        network: chainId
    });
    if (!FCLP256VerifierDeployment) {
        throw new Error(`Failed to load FCLP256Verifier deployment for chain ID ${chainId}`);
    }
    const verifierAddress = FCLP256VerifierDeployment.networkAddresses[chainId];
    if (!verifierAddress) {
        throw new Error(`FCLP256Verifier address not found for chain ID ${chainId}`);
    }
    return verifierAddress;
}
exports.getDefaultFCLP256VerifierAddress = getDefaultFCLP256VerifierAddress;
//# sourceMappingURL=extractPasskeyData.js.map